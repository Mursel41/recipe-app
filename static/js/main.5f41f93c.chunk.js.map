{"version":3,"sources":["components/RecipeDetails.js","components/Recipe.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["RecipeDetails","ingredients","map","ingredient","className","key","uuidv4","text","weight","Recipe","recipe","useState","show","setShow","label","image","url","src","alt","href","target","rel","onClick","Alert","alert","App","query","setQuery","recipes","setRecipes","setAlert","getData","a","Axios","get","result","data","more","hits","console","log","onSubmit","e","preventDefault","type","placeholder","autoComplete","onChange","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSAceA,G,MAXO,SAAC,GACrB,OADyC,EAAlBC,YACJC,KAAI,SAACC,GACtB,OACE,wBAAIC,UAAU,kBAAkBC,IAAKC,KACnC,wBAAIF,UAAU,mBAAmBD,EAAWI,MAC5C,wBAAIH,UAAU,qBAAd,YAA4CD,EAAWK,cCYhDC,EAjBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACLC,oBAAS,GADJ,mBACtBC,EADsB,KAChBC,EADgB,OAGcH,EAAOA,OAA1CI,EAHqB,EAGrBA,MAAOC,EAHc,EAGdA,MAAOC,EAHO,EAGPA,IAAKf,EAHE,EAGFA,YAC3B,OACE,yBAAKG,UAAU,UACb,4BAAKU,GACL,yBAAKG,IAAKF,EAAOG,IAAKJ,IACtB,uBAAGK,KAAMH,EAAKI,OAAO,SAASC,IAAI,uBAAlC,gBAGA,4BAAQC,QAAS,kBAAMT,GAASD,KAAhC,eACCA,GAAQ,kBAAC,EAAD,CAAeX,YAAaA,MCL5BsB,EARD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OACE,yBAAKpB,UAAU,SACb,4BAAKoB,KC0DIC,EAxDH,WAAO,IAAD,EACUd,mBAAS,IADnB,mBACTe,EADS,KACFC,EADE,OAEchB,mBAAS,IAFvB,mBAETiB,EAFS,KAEAC,EAFA,OAGUlB,mBAAS,IAHnB,mBAGTa,EAHS,KAGFM,EAHE,KAQVd,EAAG,0CAAsCU,EAAtC,mBAHM,WAGN,oBAFO,oCAIVK,EAAO,uCAAG,4BAAAC,EAAA,yDACA,KAAVN,EADU,iCAESO,IAAMC,IAAIlB,GAFnB,WAENmB,EAFM,QAGAC,KAAKC,KAHL,yCAIHP,EAAS,2BAJN,OAMZD,EAAWM,EAAOC,KAAKE,MACvBR,EAAS,IACTS,QAAQC,IAAIL,GACZR,EAAS,IATG,wBAWZG,EAAS,wBAXG,4CAAH,qDAwBb,OACE,yBAAK1B,UAAU,OACb,wBAAIkB,QAASS,GAAb,oBACA,0BAAM3B,UAAU,cAAcqC,SAZjB,SAACC,GAChBA,EAAEC,iBACFZ,MAWe,KAAVP,GAAgB,kBAAC,EAAD,CAAOA,MAAOA,IAC/B,2BACEoB,KAAK,OACLC,YAAY,gBACZC,aAAa,MACbC,SAbS,SAACL,GAChBf,EAASe,EAAEtB,OAAO4B,QAaZA,MAAOtB,IAET,2BAAOkB,KAAK,SAASI,MAAM,YAE7B,yBAAK5C,UAAU,WACZwB,IAAY,IACXA,EAAQ1B,KAAI,SAACQ,GAAD,OAAY,kBAAC,EAAD,CAAQL,IAAKC,cAAUI,OAAQA,UC7C7CuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.5f41f93c.chunk.js","sourcesContent":["import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst RecipeDetails = ({ ingredients }) => {\n  return ingredients.map((ingredient) => {\n    return (\n      <ul className=\"ingredient-list\" key={uuidv4}>\n        <li className=\"ingredient-text\">{ingredient.text}</li>\n        <li className=\"ingredient-weight\">Weight - {ingredient.weight}</li>\n      </ul>\n    );\n  });\n};\n\nexport default RecipeDetails;\n","import React, { useState } from \"react\";\nimport RecipeDetails from \"./RecipeDetails\";\n\nconst Recipe = ({ recipe }) => {\n  const [show, setShow] = useState(false);\n\n  const { label, image, url, ingredients } = recipe.recipe;\n  return (\n    <div className=\"recipe\">\n      <h2>{label}</h2>\n      <img src={image} alt={label} />\n      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n        Read More...\n      </a>\n      <button onClick={() => setShow(!show)}>Ingredients</button>\n      {show && <RecipeDetails ingredients={ingredients} />}\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React from \"react\";\n\nconst Alert = ({ alert }) => {\n  return (\n    <div className=\"alert\">\n      <h3>{alert}</h3>\n    </div>\n  );\n};\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport Axios from \"axios\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport Recipe from \"./components/Recipe\";\nimport Alert from \"./components/Alert\";\n\nconst App = () => {\n  const [query, setQuery] = useState(\"\");\n  const [recipes, setRecipes] = useState([]);\n  const [alert, setAlert] = useState(\"\");\n\n  const APP_ID = \"4e9f05eb\";\n  const APP_KEY = \"9b904d703fa0d46a88ce1ac63f29f498\";\n\n  const url = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  const getData = async () => {\n    if (query !== \"\") {\n      const result = await Axios.get(url);\n      if (!result.data.more) {\n        return setAlert(\"No food with such name\");\n      }\n      setRecipes(result.data.hits);\n      setAlert(\"\");\n      console.log(result);\n      setQuery(\"\");\n    } else {\n      setAlert(\"Please fill the form\");\n    }\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    getData();\n  };\n\n  const onChange = (e) => {\n    setQuery(e.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 onClick={getData}>Find Your Recipe</h1>\n      <form className=\"search-form\" onSubmit={onSubmit}>\n        {alert !== \"\" && <Alert alert={alert} />}\n        <input\n          type=\"text\"\n          placeholder=\"Search Recipe\"\n          autoComplete=\"off\"\n          onChange={onChange}\n          value={query}\n        />\n        <input type=\"submit\" value=\"search\" />\n      </form>\n      <div className=\"recipes\">\n        {recipes !== [] &&\n          recipes.map((recipe) => <Recipe key={uuidv4()} recipe={recipe} />)}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}